generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role		    String    @default("user")
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String  @id @default(cuid()) @map("_id")
  slug  String  @unique
  title String
  img   String?
  Posts Post[]
}

model Post {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  slug      String    @unique
  title     String
  desc      String
  img       String?
  imgBig	String?
  views     Int       @default(0)
  catSlug   String
  cat       Category  @relation(fields: [catSlug], references: [slug])
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email])
  comments  Comment[]
  sections  Section[]
  updates   Update[]
}

model Update {
  id          String   @id @default(cuid()) @map("_id")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  title       String
  content     String
  postSlug    String?
  post        Post?    @relation(fields: [postSlug], references: [slug])
  sectionId   String?
  section     Section? @relation(fields: [sectionId], references: [id])
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime? @default(now())
  desc      String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
}

model Section {
  id      String  @id @default(cuid()) @map("_id")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @default(now())
  title   String
  content String
  icon    String?
  type    String  @default("text") // Ajoutez ce champ pour d√©terminer le type de la section
  postId  String
  post    Post    @relation(fields: [postId], references: [id])
  sets    Set[] // Relier les sets aux sections
  tables   Table[]
  updates   Update[]
  displayOrder Int?
}

model Set {
  id                 String   @id @default(cuid()) @map("_id")
  title              String
  standardImage      String
  opponentImage      String
  opponentSpells     String
  explanation        String
  timings            String
  alternatives       String
  palsImage          String
  palsAlternatives   String
  relicsImage        String
  relicsAlternatives String
  talentImage		 String?
  talents            String
  mounts             Json // Changed to Json to store array of objects
  artifacts          Json // Changed to Json to store array of objects
  accessories        Json // Changed to Json to store array of objects
  avians             Json // Changed to Json to store object with list and affixes
  sectionId          String?
  section            Section?  @relation(fields: [sectionId], references: [id])
}

model Table {
  id          String      @id @default(cuid()) @map("_id")
  title       String

  rows        TableRow[]  @relation("TableRows")

  sectionId   String
  section     Section?  @relation(fields: [sectionId], references: [id])
}

model TableRow {
  id        String  @id @default(cuid()) @map("_id")
  stat      String
  explanation String
  table     Table   @relation("TableRows", fields: [tableId], references: [id])
  tableId   String
}